/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.evanshannon.x;

import javax.swing.*;
import java.io.IOException;
import java.util.Random;

/**
 *
 * @author Evan
 */
public class Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        usernameText = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        comboBox = new javax.swing.JComboBox<>();
        launchServer = new javax.swing.JToggleButton();
        hostText = new javax.swing.JLabel();
        hostField = new javax.swing.JTextField();
        launchClient = new javax.swing.JToggleButton();
        resolution = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        usernameText.setText("Username");

        comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Color", "Red", "Yellow", "Green", "Cyan", "Blue", "Magenta" }));

        launchServer.setText("Launch New Server");
        launchServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                launchServerActionPerformed(evt);
            }
        });

        hostText.setText("Host IP");

        launchClient.setText("Connect to Server");
        launchClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                launchClientActionPerformed(evt);
            }
        });

        resolution.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "480x360", "640x480", "1280x720", "1366x768", "1920x1080" }));
        resolution.setSelectedIndex(4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(launchClient, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(usernameText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(usernameField))
                    .addComponent(launchServer, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(hostText)
                        .addGap(18, 18, 18)
                        .addComponent(hostField))
                    .addComponent(resolution, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameText)
                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resolution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(launchServer, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hostText)
                    .addComponent(hostField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(launchClient)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void launchServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_launchServerActionPerformed
        launchServer();
    }//GEN-LAST:event_launchServerActionPerformed

    private void launchClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_launchClientActionPerformed
        launchClient();
    }//GEN-LAST:event_launchClientActionPerformed

    public static void start() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboBox;
    private javax.swing.JTextField hostField;
    private javax.swing.JLabel hostText;
    private javax.swing.JToggleButton launchClient;
    private javax.swing.JToggleButton launchServer;
    private javax.swing.JComboBox<String> resolution;
    private javax.swing.JTextField usernameField;
    private javax.swing.JLabel usernameText;
    // End of variables declaration//GEN-END:variables

    private void launchServer(){
        if(!initApp()) return;

        X.seed = MathLib.roll(Integer.MIN_VALUE,Integer.MAX_VALUE);

        X.SERVER = new Server();
        Thread server = new Thread(() -> {
            try {
                X.SERVER.start(X.PORT);
            } catch (IOException e) {
                error(e.getMessage());
            }
        });
        server.start();

        X.launchApp();
        dispose();
    }
    private void launchClient(){
        if(!initApp()) return;

        final String ip = hostField.getText();
        X.CLIENT = new Client();
        X.running = false;
        try{
            final boolean run = X.CLIENT.startConnection(ip,X.PORT);
            if(run) X.launchApp();
            else{
                error("Another player already picked that color! Try again!");
                return;
            }
        } catch (IOException e) {
            error(e.getMessage());
            return;
        }
        dispose();
    }
    private boolean initApp(){
        final int x = Integer.parseInt(((String)resolution.getSelectedItem()).split("x")[0]);
        final int y = Integer.parseInt(((String)resolution.getSelectedItem()).split("x")[1]);
        X.RESOLUTION[0] = x;
        X.RESOLUTION[1] = y;
        System.out.println("Resolution: " + X.RESOLUTION[0] + "x" + X.RESOLUTION[1]);

        final String username = usernameField.getText();
        if(username.isBlank()){
            error("Username must not be blank!");
            return false;
        }
        X.USERNAME = username;
        System.out.println("Username: " + X.USERNAME);

        final String color = (String)comboBox.getSelectedItem();
        if(color == null) return false;
        if(color.equals(comboBox.getItemAt(0))){
            error("You must select a color!");
            return false;
        }
        X.COLOR = color;
        System.out.println("Color: " + X.COLOR);
        return true;
    }
    private void error(String message){
        System.out.println("Error: " +message);
        JOptionPane.showMessageDialog(this,message,"Error",JOptionPane.ERROR_MESSAGE);
    }
}
